Algorithm for Solving the 8-Puzzle (A Search)*
Aim: Solve the 8-puzzle problem by finding the shortest sequence of moves to reach the goal state using the A* algorithm with the Manhattan distance heuristic.
Algorithm:
1.Initialize:Start with the initial board configuration.
2.Define a priority queue (min-heap) to store puzzle states, prioritized by f = moves + heuristic.
3.Define Heuristic:Use Manhattan distance to estimate the cost from the current state to the goal state.
4.Explore States:Pop the state with the lowest priority from the queue.
5.Check if it matches the goal state; if yes, reconstruct the path.
6.Generate all valid neighboring states by sliding tiles and calculate their priorities.
7.Push unexplored neighbors into the queue.
8.Avoid Revisits:Keep a set of visited states to avoid reprocessing the same configurations.
9.Terminate:If the goal state is found, return the sequence of moves.
10.If the queue is empty, no solution exists.
code:
import heapq

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):  # Fixed the method name
        self.board = board
        self.moves = moves
        self.previous = previous
        self.empty_pos = self.board.index(0)
        self.priority = self.moves + self.manhattan_distance()

    def manhattan_distance(self):
        """Calculates the Manhattan distance heuristic."""
        distance = 0
        goal_positions = [(i // 3, i % 3) for i in range(9)]
        for i, value in enumerate(self.board):
            if value != 0:
                current_pos = (i // 3, i % 3)
                goal_pos = goal_positions[value]
                distance += abs(current_pos[0] - goal_pos[0]) + abs(current_pos[1] - goal_pos[1])
        return distance

    def is_goal(self):
        """Checks if the current state is the goal state."""
        return self.board == [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def neighbors(self):
        """Generates neighboring states."""
        neighbors = []
        row, col = divmod(self.empty_pos, 3)
        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

        for dr, dc in moves:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_empty_pos = new_row * 3 + new_col
                new_board = self.board[:]
                new_board[self.empty_pos], new_board[new_empty_pos] = new_board[new_empty_pos], new_board[self.empty_pos]
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbors

    def __lt__(self, other):
        return self.priority < other.priority


def solve_8_puzzle(start_board):
    """Solves the 8-puzzle problem using the A* algorithm."""
    open_set = []
    heapq.heappush(open_set, PuzzleState(start_board))
    visited = set()

    while open_set:
        current = heapq.heappop(open_set)

        if tuple(current.board) in visited:
            continue
        visited.add(tuple(current.board))

        if current.is_goal():
            return reconstruct_path(current)

        for neighbor in current.neighbors():
            if tuple(neighbor.board) not in visited:
                heapq.heappush(open_set, neighbor)

    return None  # No solution found


def reconstruct_path(state):
    """Reconstructs the solution path from the goal state."""
    path = []
    while state:
        path.append(state.board)
        state = state.previous
    return path[::-1]


# User Input
def get_user_input():
    print("Enter the 8-puzzle board configuration row by row (use 0 for the empty tile):")
    board = []
    for i in range(3):
        row = input(f"Enter row {i + 1} (space-separated): ").split()
        board.extend(map(int, row))
    if len(board) != 9 or sorted(board) != list(range(9)):
        raise ValueError("Invalid board configuration. Please ensure all numbers from 0 to 8 are included.")
    return board


try:
    start_board = get_user_input()
    solution = solve_8_puzzle(start_board)

    if solution:
        print("\nSolution found in", len(solution) - 1, "moves!")
        for step in solution:
            for i in range(0, 9, 3):
                print(step[i:i + 3])
            print()
    else:
        print("No solution found.")
except ValueError as e:
    print(f"Error: {e}")
SAMPLE OUTPUT:
Enter the 8-puzzle board configuration row by row (use 0 for the empty tile):
Enter row 1 (space-separated): 1 2 3
Enter row 2 (space-separated): 4 5 6
Enter row 3 (space-separated): 7 0 8

Solution found in 1 moves!
[1, 2, 3]
[4, 5, 6]
[7, 0, 8]

[1, 2, 3]
[4, 5, 6]
[7, 8, 0]



