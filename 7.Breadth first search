Aim:
The aim of the program is to demonstrate Breadth-First Search (BFS) traversal in a graph. 
BFS is a graph traversal algorithm that explores all vertices of a graph level by level starting from a given source node.
Algorithm:
1. Graph Representation:
Use an adjacency list to represent the graph.
Each node is a key, and its value is a list of its neighbors.
2. Initialize the BFS:
Create a visited set to track visited nodes and prevent cycles.
Create a queue (FIFO) to manage the order in which nodes are visited.
3. BFS Traversal:
Add the starting node to the visited set and enqueue it.
While the queue is not empty:
Dequeue a node and print it (visit the node).
For each neighbor of the node:
If the neighbor has not been visited:
Mark it as visited.
Enqueue the neighbor to visit later.
4. Edge Addition:
Use the add_edge method to define edges in the graph.
5. Execution:
Create a graph, add edges, and perform BFS starting from a specified node.
Code:
print("BFS")
from collections import defaultdict, deque
class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
    def add_edge(self, u, v):
        self.graph[u].append(v)
    def bfs(self, start_node):
        visited = set()
        queue = deque([start_node])
        visited.add(start_node)
        while queue:
            node = queue.popleft()
            print(node, end=" ")
            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)
                    visited.add(neighbor)
# Example usage
g = Graph()
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)
g.add_edge(2, 5)
g.add_edge(3, 6)
g.add_edge(3, 7)
g.add_edge(4, 8)
g.add_edge(5, 9)
print("BFS starting from node 1:")
g.bfs(1)
Output:
Enter the start node: A
Enter the goal node: D
Goal found!
Path: A -> B -> D
